// Generated by gencpp from file disp_cv/multibox.msg
// DO NOT EDIT!


#ifndef DISP_CV_MESSAGE_MULTIBOX_H
#define DISP_CV_MESSAGE_MULTIBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <disp_cv/box.h>

namespace disp_cv
{
template <class ContainerAllocator>
struct multibox_
{
  typedef multibox_<ContainerAllocator> Type;

  multibox_()
    : timestamp()
    , boxes()  {
    }
  multibox_(const ContainerAllocator& _alloc)
    : timestamp()
    , boxes(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector< ::disp_cv::box_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::disp_cv::box_<ContainerAllocator> >::other >  _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::disp_cv::multibox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::disp_cv::multibox_<ContainerAllocator> const> ConstPtr;

}; // struct multibox_

typedef ::disp_cv::multibox_<std::allocator<void> > multibox;

typedef boost::shared_ptr< ::disp_cv::multibox > multiboxPtr;
typedef boost::shared_ptr< ::disp_cv::multibox const> multiboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::disp_cv::multibox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::disp_cv::multibox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace disp_cv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'disp_cv': ['/home/harsh/ros_ws/src/disp_cv/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::disp_cv::multibox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::disp_cv::multibox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::disp_cv::multibox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::disp_cv::multibox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::disp_cv::multibox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::disp_cv::multibox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::disp_cv::multibox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4948510b7a7cae5de3b73ed3d60baa3b";
  }

  static const char* value(const ::disp_cv::multibox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4948510b7a7cae5dULL;
  static const uint64_t static_value2 = 0xe3b73ed3d60baa3bULL;
};

template<class ContainerAllocator>
struct DataType< ::disp_cv::multibox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "disp_cv/multibox";
  }

  static const char* value(const ::disp_cv::multibox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::disp_cv::multibox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n\
box[] boxes\n\
\n\
================================================================================\n\
MSG: disp_cv/box\n\
int32 x\n\
int32 y\n\
int32 h\n\
int32 w\n\
";
  }

  static const char* value(const ::disp_cv::multibox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::disp_cv::multibox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct multibox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::disp_cv::multibox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::disp_cv::multibox_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::disp_cv::box_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISP_CV_MESSAGE_MULTIBOX_H
