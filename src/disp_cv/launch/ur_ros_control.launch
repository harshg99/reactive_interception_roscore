<?xml version="1.0"?>
<launch>

  <!-- GDB functionality -->


  <arg name="robot_ip"/>
  <arg name="limited" default="false"/>
  <arg name="min_payload"  default="0.0"/>
  <arg name="max_payload"  default="3.0"/>
  <arg name="prefix" default="" />
  <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
  <arg name="base_frame" default="$(arg prefix)base" />
  <arg name="tool_frame" default="$(arg prefix)tool0_controller" />

  <arg name="paused" default="true"/>
  <arg name="gui" default="true"/>
  <!-- robot model -->


<include file="$(find gazebo_ros)/launch/empty_world.launch">
  <arg name="world_name" default="worlds/ur5_demo_world.world"/>
  <arg name="paused" value="$(arg paused)"/>
  <arg name="gui" value="$(arg gui)"/>
</include>

<!-- Convert joint states to /tf tranforms -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <!-- Load hardware interface -->
  <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="screen" >
    <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
    <param name="min_payload" type="double" value="$(arg min_payload)"/>
    <param name="max_payload" type="double" value="$(arg max_payload)"/>
    <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
    <param name="use_ros_control" type="bool" value="True"/>
    <param name="servoj_gain" type="double" value="750" />
    <param name="prefix" value="$(arg prefix)" />
    <param name="base_frame" type="str" value="$(arg base_frame)"/>
    <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
  </node>
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model ur5robot" respawn="false" output="screen" />


  <!-- Load controller settings -->
  <rosparam file="$(find ur_modern_driver)/config/ur5_controllers.yaml" command="load"/>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="joint_state_controller force_torque_sensor_controller vel_based_pos_traj_controller" />

  <!-- load other controller -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="load pos_based_pos_traj_controller" />


</launch>

